#!/usr/bin/env python3
"""
Diagn√≥stico de Permiss√µes BookStack - Teste Detalhado
"""

import sys
import os

# Adicionar diret√≥rio raiz ao path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.bookstack_client import BookStackClient
from src.config_manager import ConfigManager

def test_bookstack_permissions():
    """Testa permiss√µes detalhadas do BookStack"""
    print("üîß DIAGN√ìSTICO DE PERMISS√ïES BOOKSTACK")
    print("=" * 50)
    
    # Carregar configura√ß√µes
    config_manager = ConfigManager()
    config = config_manager.load_config()
    
    if not config:
        print("‚ùå Nenhuma configura√ß√£o encontrada!")
        print("   Configure o BookStack primeiro na interface gr√°fica.")
        return
    
    # Verificar se tem configura√ß√£o BookStack
    required_fields = ['bookstack_url', 'bookstack_token_id', 'bookstack_token_secret']
    missing_fields = [field for field in required_fields if not config.get(field)]
    
    if missing_fields:
        print(f"‚ùå Configura√ß√µes BookStack incompletas!")
        print(f"   Campos faltando: {', '.join(missing_fields)}")
        return
    
    # Criar cliente
    client = BookStackClient(
        base_url=config['bookstack_url'],
        token_id=config['bookstack_token_id'],
        token_secret=config['bookstack_token_secret'],
        verify_ssl=config.get('bookstack_verify_ssl', True)
    )
    
    print(f"üåê Testando: {client.base_url}")
    print(f"üîë Token ID: {client.token_id[:10]}...")
    print()
    
    # TESTE 1: Conex√£o b√°sica
    print("1Ô∏è‚É£ TESTE DE CONEX√ÉO B√ÅSICA")
    print("-" * 30)
    
    result = client.test_connection()
    
    if result.get('success'):
        print("‚úÖ Conex√£o estabelecida")
        
        user_info = result.get('user_info', {})
        if user_info:
            print(f"üë§ Usu√°rio: {user_info.get('name', 'N/A')}")
            if user_info.get('email'):
                print(f"üìß Email: {user_info['email']}")
            if user_info.get('id'):
                print(f"üÜî ID: {user_info['id']}")
        
        # Verificar permiss√µes de cria√ß√£o
        create_perms = result.get('create_permissions', {})
        if create_perms:
            can_create = create_perms.get('can_create', False)
            status = create_perms.get('status', 'Desconhecido')
            print(f"üîê Permiss√µes de cria√ß√£o: {'‚úÖ' if can_create else '‚ùå'} {status}")
            
            if not can_create:
                print("‚ö†Ô∏è  PROBLEMA DETECTADO:")
                print(f"   {create_perms.get('details', 'Sem detalhes')}")
                if 'solution' in create_perms:
                    print("\nüí° SOLU√á√ÉO:")
                    for line in create_perms['solution'].split('\n'):
                        if line.strip():
                            print(f"   {line}")
                return  # Parar aqui se n√£o tem permiss√µes b√°sicas
        
        print()
        
    else:
        print("‚ùå Falha na conex√£o")
        print(f"   {result.get('message', 'Erro desconhecido')}")
        if 'solution' in result:
            print("\nüí° SOLU√á√ÉO:")
            for line in result['solution'].split('\n'):
                if line.strip():
                    print(f"   {line}")
        return
    
    # TESTE 2: Listar livros
    print("2Ô∏è‚É£ TESTE DE ACESSO A LIVROS")
    print("-" * 30)
    
    try:
        books = client.get_books(limit=5)
        if books:
            print(f"‚úÖ {len(books)} livro(s) encontrado(s):")
            for book in books[:3]:
                print(f"   üìö {book.get('name', 'Sem nome')} (ID: {book.get('id')})")
            if len(books) > 3:
                print(f"   ... e mais {len(books) - 3} livros")
        else:
            print("‚ö†Ô∏è  Nenhum livro encontrado")
            print("   Pode n√£o ter permiss√£o de leitura ou n√£o h√° livros criados")
    except Exception as e:
        print(f"‚ùå Erro ao listar livros: {e}")
        return
    
    print()
    
    # TESTE 3: Teste de cria√ß√£o simulada (sem criar realmente)
    print("3Ô∏è‚É£ TESTE SIMULADO DE CRIA√á√ÉO")
    print("-" * 30)
    
    if books:
        test_book = books[0]
        print(f"üìñ Testando com livro: {test_book.get('name')} (ID: {test_book.get('id')})")
        
        # Tentar obter detalhes do livro
        try:
            book_details = client._make_request('GET', f"/books/{test_book['id']}")
            print("‚úÖ Acesso a detalhes do livro confirmado")
        except Exception as e:
            print(f"‚ùå Erro ao acessar detalhes do livro: {e}")
            if "403" in str(e):
                print("   ‚Üí Token n√£o tem permiss√£o de leitura detalhada")
        
        # Preparar dados de teste (sem enviar)
        test_page_data = {
            'name': 'TESTE_CONEXAO_API_NAO_CRIAR',
            'html': '<p>Esta √© uma p√°gina de teste que n√£o deveria ser criada</p>',
            'book_id': test_book['id']
        }
        
        print("‚ÑπÔ∏è  Dados de teste preparados (n√£o ser√£o enviados)")
        print(f"   Nome: {test_page_data['name']}")
        print(f"   Destino: Livro {test_book['id']}")
        
    print()
    
    # TESTE 4: Verifica√ß√£o de roles/permiss√µes do usu√°rio
    print("4Ô∏è‚É£ VERIFICA√á√ÉO DE ROLES")
    print("-" * 30)
    
    try:
        # Tentar acessar endpoint de roles (pode falhar dependendo da vers√£o)
        try:
            roles_response = client._make_request('GET', '/roles')
            roles = roles_response.get('data', [])
            print(f"‚úÖ {len(roles)} role(s) no sistema:")
            for role in roles[:5]:
                print(f"   üé≠ {role.get('display_name', role.get('name', 'Sem nome'))}")
        except:
            print("‚ÑπÔ∏è  N√£o foi poss√≠vel listar roles (normal em algumas vers√µes)")
        
        # Tentar verificar permiss√µes do usu√°rio atual
        user_info = result.get('user_info', {})
        if user_info.get('id'):
            try:
                user_details = client._make_request('GET', f"/users/{user_info['id']}")
                user_roles = user_details.get('roles', [])
                if user_roles:
                    print(f"üë§ Roles do usu√°rio atual:")
                    for role in user_roles:
                        print(f"   üé≠ {role.get('display_name', role.get('name', 'Sem nome'))}")
                else:
                    print("‚ö†Ô∏è  Usu√°rio sem roles atribu√≠das")
            except:
                print("‚ÑπÔ∏è  N√£o foi poss√≠vel verificar roles do usu√°rio")
    except Exception as e:
        print(f"‚ÑπÔ∏è  Verifica√ß√£o de roles limitada: {e}")
    
    print()
    
    # RESUMO FINAL
    print("üìã RESUMO DO DIAGN√ìSTICO")
    print("=" * 30)
    
    if result.get('success'):
        create_perms = result.get('create_permissions', {})
        can_create = create_perms.get('can_create', False)
        
        if can_create:
            print("‚úÖ TUDO OK - Token tem permiss√µes adequadas")
            print("   Voc√™ pode enviar p√°ginas para o BookStack")
        else:
            print("‚ùå PROBLEMA IDENTIFICADO - Token sem permiss√µes de cria√ß√£o")
            print(f"   Status: {create_perms.get('status', 'Desconhecido')}")
            print("\nüîß PR√ìXIMOS PASSOS:")
            print("   1. Acesse o BookStack como administrador")
            print("   2. V√° em: Configura√ß√µes > Usu√°rios")
            print("   3. Encontre o usu√°rio do token atual")
            print("   4. Edite o usu√°rio e verifique as roles")
            print("   5. Certifique-se que tem uma role com 'API Access'")
            print("   6. Se necess√°rio, crie nova role com permiss√µes adequadas")
    else:
        print("‚ùå PROBLEMA CR√çTICO - Conex√£o b√°sica falhou")
        print("   Resolva problemas de conex√£o antes de testar permiss√µes")
    
    print("\nüèÅ Diagn√≥stico conclu√≠do!")

if __name__ == "__main__":
    test_bookstack_permissions()
