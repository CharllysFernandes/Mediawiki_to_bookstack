#!/usr/bin/env python3
"""
Script de exemplo demonstrando as capacidades do parser avan√ßado de wikitext
"""

import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.wikitext_parser import WikitextParser

def test_advanced_parsing():
    """Demonstra parsing avan√ßado com mwparserfromhell"""
    
    parser = WikitextParser()
    
    # Exemplo 1: P√°gina com templates complexos
    wikitext1 = """
== Introdu√ß√£o ==

Esta √© uma p√°gina de exemplo com {{note|Esta √© uma nota importante}} sobre o assunto.

=== Infobox ===

{{infobox pessoa
|nome = Jo√£o Silva  
|idade = 30
|profiss√£o = Desenvolvedor
|localiza√ß√£o = S√£o Paulo
}}

=== C√≥digo de Exemplo ===

{{code|lang=python|
def hello_world():
    print("Hello, World!")
}}

=== Cita√ß√µes ===

{{quote|A programa√ß√£o √© uma arte|author=Algum Programador}}

== Links e Refer√™ncias ==

Veja tamb√©m [[Programa√ß√£o]] e [[Python]].

Link externo: [https://python.org Python Official Site]

=== Tabela ===

{| class="wikitable"
! Nome !! Idade !! Cidade
|-
| Jo√£o || 30 || S√£o Paulo  
|-
| Maria || 25 || Rio de Janeiro
|}

=== Formata√ß√£o ===

Texto '''negrito''' e ''it√°lico''.

<code>c√≥digo inline</code>

<pre>
bloco de c√≥digo
m√∫ltiplas linhas
</pre>

== Categorias ==

[[Category:Programa√ß√£o]]
[[Category:Python]]
"""

    print("=== EXEMPLO 1: Parsing Avan√ßado ===")
    result1 = parser.parse_wikitext(wikitext1, "P√°gina de Exemplo", ["Programa√ß√£o", "Python"])
    print("Dados extra√≠dos:")
    print(f"- T√≠tulo: {result1['title']}")
    print(f"- Categorias: {result1['categories']}")
    print(f"- Templates encontrados: {len(result1['templates'])}")
    print(f"- Links encontrados: {len(result1['links'])}")
    print(f"- Se√ß√µes encontradas: {len(result1['sections'])}")
    
    if result1['templates']:
        print("\nTemplates:")
        for template in result1['templates']:
            print(f"  - {template['name']}: {list(template['params'].keys())}")
    
    if result1['sections']:
        print("\nSe√ß√µes:")
        for section in result1['sections']:
            print(f"  - H{section['level']}: {section['title']}")
    
    print("\n" + "="*50)
    print("\n" + "="*60 + "\n")
    
    # Exemplo 2: P√°gina com estrutura complexa
    wikitext2 = """
= Procedimento de Instala√ß√£o =

{{warning|Sempre fa√ßa backup antes de prosseguir}}

== Pr√©-requisitos ==

* Sistema operacional suportado
* [[Python]] vers√£o 3.8 ou superior  
* Acesso administrativo

=== Verifica√ß√£o do Sistema ===

Execute o comando:

{{code|lang=bash|python --version}}

== Instala√ß√£o ==

1. Baixe o arquivo de instala√ß√£o
2. Execute como administrador
3. Siga as instru√ß√µes na tela

{{infobox software
|nome = MeuSoftware
|vers√£o = 2.1.0
|licen√ßa = MIT
|desenvolvedor = Equipe Dev
}}

== Solu√ß√£o de Problemas ==

{{note|Em caso de erro, consulte os logs em /var/log/}}

=== Erros Comuns ===

* '''Erro 404''': Arquivo n√£o encontrado
* '''Erro 500''': Problema no servidor

== Ver Tamb√©m ==

* [[Documenta√ß√£o]]
* [[FAQ]]

[[Category:Instala√ß√£o]]
[[Category:Software]]
"""

    print("=== EXEMPLO 2: Procedimento T√©cnico ===")
    result2 = parser.parse_wikitext(wikitext2, "Procedimento de Instala√ß√£o", ["Instala√ß√£o", "Software"])
    print("Dados extra√≠dos:")
    print(f"- T√≠tulo: {result2['title']}")
    print(f"- Categorias: {result2['categories']}")
    print(f"- Templates encontrados: {len(result2['templates'])}")
    print(f"- Links encontrados: {len(result2['links'])}")
    print(f"- Se√ß√µes encontradas: {len(result2['sections'])}")
    print("\n" + "="*60 + "\n")

def test_fallback():
    """Testa o sistema de fallback"""
    
    # Simular texto problem√°tico que pode causar erro no parser
    problematic_wikitext = """
== T√≠tulo ==

{{template_inexistente|param1|param2={{nested|value}}}}

Texto normal aqui.

[[Link quebrado|
"""
    
    parser = WikitextParser()
    print("=== EXEMPLO 3: Teste de Fallback ===")
    
    try:
        result = parser.parse_wikitext(problematic_wikitext, "Teste de Fallback")
        print("Parsing realizado com sucesso!")
        print(f"- Erro no parsing: {result.get('parse_error', 'Nenhum')}")
        print(f"- Templates encontrados: {len(result['templates'])}")
        print(f"- Conte√∫do preservado: {len(result['content'])} caracteres")
    except Exception as e:
        print(f"Erro: {e}")

def compare_methods():
    """Compara m√©todo b√°sico vs avan√ßado"""
    
    test_wikitext = """
== T√≠tulo ==

{{note|Nota importante}}

Texto com '''negrito''' e ''it√°lico''.

[[Link interno]] e [https://example.com link externo].

{| class="wikitable"
! Coluna 1 !! Coluna 2
|-
| Dados 1 || Dados 2
|}

{{code|lang=python|print("Hello")}}
"""
    
    parser = WikitextParser()
    
    print("=== COMPARA√á√ÉO: Parser Avan√ßado vs B√°sico ===")
    print("\n--- Parser Avan√ßado ---")
    advanced_result = parser.parse_wikitext(test_wikitext, "Teste de Compara√ß√£o")
    print(f"Templates encontrados: {len(advanced_result['templates'])}")
    print(f"Links encontrados: {len(advanced_result['links'])}")
    print(f"Se√ß√µes encontradas: {len(advanced_result['sections'])}")
    
    print("\n--- Limpeza B√°sica ---") 
    basic_result = parser.clean_wikitext(test_wikitext)
    print(f"Texto limpo ({len(basic_result)} caracteres)")
    print(basic_result[:200] + "..." if len(basic_result) > 200 else basic_result)

if __name__ == "__main__":
    print("üîç Demonstra√ß√£o do Parser de Wikitext\n")
    
    try:
        import mwparserfromhell
        print("‚úÖ mwparserfromhell dispon√≠vel - testando parser\n")
        
        test_advanced_parsing()
        test_fallback()
        compare_methods()
        
    except ImportError:
        print("‚ùå mwparserfromhell n√£o instalado")
        print("Para instalar: pip install mwparserfromhell")
        print("Executando apenas teste b√°sico...\n")
        
        converter = WikitextToMarkdownConverter()
        basic_text = "== T√≠tulo ==\nTexto '''negrito''' aqui."
        result = converter._basic_regex_conversion(basic_text)
        print("Convers√£o b√°sica:", result)
